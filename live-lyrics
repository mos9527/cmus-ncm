#!/usr/bin/python
# Still WIP,but already looks pretty promising

import curses
# region Colors
COLOR_ACCENT            = curses.COLOR_WHITE
COLOR_BACKGROUND_BARS   = curses.COLOR_BLUE
COLOR_BACKGROUND_LYRICS = curses.COLOR_BLACK
COLOR_HIGHLIGHT         = curses.COLOR_YELLOW
# endregion

import time,sys,os,unicodedata
from threading import Thread
import subprocess
from collections import defaultdict

from pyncm.utils.lrcparser import LrcParser
check_interval = 0.5

COLS,LINES = 0,0
status = None
# region C* Related stuff
def ReadCmusStatus() -> dict:
    process = subprocess.run(['cmus-remote','-Q'],capture_output=True)
    if not process.returncode == 0:
        return 0 # sys.stderr.write(f'[!] cmus-remote exited with errorcode {process.returncode}\n') * 0 # helpful for checking is the output valiad
    else:
        result = defaultdict(list)
        for k,v in [(l[:l.index(' ')],l[l.index(' ') + 1:]) for l in process.stdout.decode().split('\n') if ' ' in l]:result[k].append(v)
        for k in ['tag','set']:result[k] = {s.split(' ')[0]:s[len(s.split(' ')[0]) + 1:] for s in result[k]}
        status = result
        return result
# endregion

# region Curses CLI stuff
'''
Design choices:

L+1...............[TRACK TITLE]................
L+2............[ LYRICS LINE -1 ]..............
L -............[ LYRICS LINE 0  ]..............
L-2............[ LYRICS LINE +1 ]..............
L-1................[STATUS]....................
'''
stdscr,Wtitle,Wlyrics,Wstatus = (None,)*4

def SetWindowsMargin():
    global Wtitle,Wlyrics,Wstatus
    stdscr.clear()
    Wtitle  = curses.newwin(2,COLS,0,0)
    Wlyrics = curses.newwin(LINES - 2,COLS,1,0)
    Wstatus = curses.newwin(2,COLS,LINES - 1,0)
    
def InitCurses(scr):# : curses._CursesWindow):
    global stdscr,COLS,LINES
    stdscr  = scr
    curses.start_color()
    LINES,COLS = stdscr.getmaxyx()

    SetWindowsMargin()
    
    curses.init_pair(1,COLOR_ACCENT,COLOR_BACKGROUND_BARS)
    curses.init_pair(2,COLOR_ACCENT,COLOR_BACKGROUND_LYRICS)
    curses.init_pair(3,COLOR_HIGHLIGHT,COLOR_BACKGROUND_LYRICS)

    curses.cbreak()
    curses.noecho()
    
def RefreshAll():
    stdscr.refresh()
    Wtitle.refresh()
    Wlyrics.refresh()
    Wstatus.refresh()

def JustifiyStr(string,mode='l',length=10,fill=' '):
    '''Justify a string's display length (CJK Compatiable)'''
    widthTotal,strTotal = 0,''
    for c in string:
        width = 2 if unicodedata.east_asian_width(c) in 'WF' else 1
        # CJK (east asian) chars are ususally 2 ASCII chars long in monospace fonts
        if widthTotal + width > length:break
        else:
            widthTotal += width
            strTotal += c
    # pad with normal ASCII characters
    if mode=='c':
        remainder = length - widthTotal
        strTotal += (remainder // 2) * fill
        strTotal = (remainder - remainder // 2) * fill + strTotal            # Center-justify
    elif mode=='r':strTotal = fill * (length - widthTotal) + strTotal        # Right-justify
    else:strTotal += fill * (length - widthTotal)                            # Left-justify
    return strTotal

def ColumnifyStr(string,justify_mode='l',cols=0,delimiter=' ') -> str:
    '''Put anystring into the length of our console column
    
        When encoutering tabs (\t),such line of string will be divided into equally wide rows
    '''
    cols = COLS - 1 if not cols else cols
    tabs = string.split('\t')
    row_width = cols // len(tabs)
    tabs = [JustifiyStr(s,mode=justify_mode,length=row_width) for s in tabs]    
    return delimiter.join(tabs)

def UpdateTitle(s):
    Wtitle.addstr(0,0,ColumnifyStr(s),curses.color_pair(1))
def UpdateStatus(s):
    Wstatus.addstr(0,0,ColumnifyStr(s),curses.color_pair(1))
def UpdateLyrics(lines,highlight_no = -1,j : str='l'):
    if not len(lines) >= LINES:
        # padding with empty lines (centered)
        dtotal = Wlyrics.getmaxyx()[0] - len(lines)
        lines = lines + [''] * dtotal
    for l in range(0,Wlyrics.getmaxyx()[0]):
        tok = ColumnifyStr(lines[l],'c',Wlyrics.getmaxyx()[1] - 1)
        Wlyrics.addstr(l,0,tok,curses.color_pair(2 + (l == highlight_no)))
def KillCurses():
    curses.endwin()

class Subthread(Thread):
    def __init__(self,*a,**k):
        self.status,self.lrc = [None] * 2
        def spinner():
            while True:
                for _ in ['|','|','/','/','-','-']:yield _
        self.spinner = spinner()
        UpdateStatus('Connecting to cmus...')   
        return super().__init__(*a,**k)

    def run(self):        
        global status
        while True:
            status = ReadCmusStatus()
            # Tries to read status from cmus
            def CheckStatus():
                if not status:
                    # No status;
                    UpdateStatus('No connection to cmus')
                    return False
                else:
                    # Status aquired
                    UpdateStatus('Updating...')
                    if not self.status or not (self.status['file'] == status['file']):
                        # file changed : reload lyrics
                        path = '.'.join(status['file'][0].split('.')[:-1]) + '.lrc'                                               
                        if not os.path.isfile(path):
                            # The lyrics cannot be located : might be a non-vocal track                        
                            UpdateStatus('Lyrics file not found : ' + path)
                            self.lrc = None
                            return True                        
                        self.lrc = LrcParser(open(path,encoding='utf-8').read())               
                    # update current status                                        
                    UpdateStatus(f'{status["status"][0].capitalize()} {next(self.spinner)} {status["file"][0]} | {status["position"][0]}s / {status["duration"][0]}s')     
                    self.status = status                              
                    return True
            def UpdateLRC():
                if not self.lrc:
                    UpdateLyrics(['No lyrics available'])
                    UpdateTitle('live-lyrics - Instrumental or missing lyrics')
                    return False                
                maxLines = Wlyrics.getmaxyx()[0]
                p = maxLines // 2 
                # the count for lyrics from P-revious 
                currentTimestamp            = int(self.status['position'][0])
                
                find                        = self.lrc.Find(self.lrc.lyrics_sorted,currentTimestamp)

                if not find:find            = (*list(self.lrc.lyrics_sorted.items())[0],0)                                        
                # nothing found,no lyrics are behind our timestamp,use 1st line instead
                mTimestamp,mLyrics,mIndex   = find                            # m -> modified                
                find_prev                   = list(self.lrc.lyrics_sorted.items())[mIndex - 1]
                fTimestamp,fLyrics          = find_prev                        # f -> formatted
                fLyrics = '\t'.join([f[1] for f in fLyrics])
                # where the key is the matching timestamp,value is the lyics itself               
                UpdateTitle(JustifiyStr(f'{fTimestamp} / {currentTimestamp}s ',length=16) + 'â”‚ ' + fLyrics.replace("\t"," "))
                # use normal spaces to avoid splitting into rows
                pS = mIndex - p - 1 
                # previous S-tarting index
                pS = pS if pS >= 0 else 0
                aE = pS + maxLines            
                lines = ['\t'.join([n[1] for n in i]) for i in list(self.lrc.lyrics_sorted.values())[pS:aE]]
                UpdateLyrics(lines,mIndex - pS - 1)                
                return True
            try:
                CheckStatus() and UpdateLRC()
                # a quite neat way of `abusing` python's conditonal checks
            except:
                pass                       
            # -- self end --
            RefreshAll()    
            time.sleep(check_interval)

def CursesMain(scr):
    global COLS,LINES
    InitCurses(scr)
    UpdateTitle('live-lyrics')     
    # Start a subthread for checking cmus events
    UpdateLyrics([],0)
    RefreshAll()

    Subthread(daemon=True).start()

    while True:
        keystroke = stdscr.getch()
        if keystroke in {ord('q') , ord('Q') , 27}:
            sys.exit(0) # Exit if q / Esc is pressed
        elif keystroke == curses.KEY_LEFT: # Left
            pos = int(ReadCmusStatus()['position'][0])
            os.system('cmus-remote --seek %d' % (pos - 5))
        elif keystroke == curses.KEY_RIGHT: # Right
            pos = int(ReadCmusStatus()['position'][0])
            os.system('cmus-remote --seek %d' % (pos + 5))
        elif keystroke in {curses.KEY_RESIZE}:            
            LINES,COLS = stdscr.getmaxyx()
            SetWindowsMargin()
            RefreshAll()
# endregion
curses.wrapper(CursesMain)
# Executes the script
